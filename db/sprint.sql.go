// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sprint.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createLane = `-- name: CreateLane :execresult
INSERT INTO lanes (name, emoji, description) values ($1, $2, $3)
`

type CreateLaneParams struct {
	Name        string      `json:"name"`
	Emoji       pgtype.Text `json:"emoji"`
	Description string      `json:"description"`
}

func (q *Queries) CreateLane(ctx context.Context, arg CreateLaneParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createLane, arg.Name, arg.Emoji, arg.Description)
}

const createSprint = `-- name: CreateSprint :execresult
INSERT INTO sprints (project_id, name, description, start_date, end_date) 
VALUES ($1, $2, $3, $4, $5)
`

type CreateSprintParams struct {
	ProjectID   pgtype.Int4        `json:"project_id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	EndDate     pgtype.Timestamptz `json:"end_date"`
}

func (q *Queries) CreateSprint(ctx context.Context, arg CreateSprintParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createSprint,
		arg.ProjectID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
}

const createTicket = `-- name: CreateTicket :execresult
INSERT INTO tickets (
    sprint_id,
    name,
    description,
    status,
    start_date,
    end_date
) values ($1, $2, $3, $4, $5, $6)
`

type CreateTicketParams struct {
	SprintID    pgtype.Int4        `json:"sprint_id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Status      pgtype.Int4        `json:"status"`
	StartDate   pgtype.Timestamptz `json:"start_date"`
	EndDate     pgtype.Timestamptz `json:"end_date"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createTicket,
		arg.SprintID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
}
