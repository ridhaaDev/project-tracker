// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAndReturnId = `-- name: CreateUserAndReturnId :one
INSERT INTO users
(
    email,
    password,
    first_name,
    last_name,
    contact_number,
    is_active
) 
VALUES ($1, $2, $3, $4, $5, $6)
returning id
`

type CreateUserAndReturnIdParams struct {
	Email         string      `json:"email"`
	Password      pgtype.Text `json:"password"`
	FirstName     pgtype.Text `json:"first_name"`
	LastName      pgtype.Text `json:"last_name"`
	ContactNumber string      `json:"contact_number"`
	IsActive      bool        `json:"is_active"`
}

func (q *Queries) CreateUserAndReturnId(ctx context.Context, arg CreateUserAndReturnIdParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUserAndReturnId,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.ContactNumber,
		arg.IsActive,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getHashedPassword = `-- name: GetHashedPassword :one
SELECT password FROM users WHERE id = $1
`

func (q *Queries) GetHashedPassword(ctx context.Context, id int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getHashedPassword, id)
	var password pgtype.Text
	err := row.Scan(&password)
	return password, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, first_name, last_name, contact_number, is_active, start_date, end_date FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.ContactNumber,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
